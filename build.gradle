
buildscript {
    ext.cubaVersion = '6.3.4'
    repositories {
        maven {
            url 'https://repo.cuba-platform.com/content/groups/work'
            credentials {
                username(rootProject.hasProperty('repoUser') ? rootProject['repoUser'] : 'cuba')
                password(rootProject.hasProperty('repoPass') ? rootProject['repoPass'] : 'cuba123')
            }
        }
        
    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"

        classpath "com.haulmont.cuba:cuba-global:$cubaVersion"

        
    }
}

def globalModule = project(':adclient-global')
def coreModule = project(':adclient-core')
def guiModule = project(':adclient-gui')
def webModule = project(':adclient-web')
def portalModule = project(':adclient-portal')

def servletApi = 'org.apache.tomcat:tomcat-servlet-api:8.0.26'


apply(plugin: 'idea')
apply(plugin: 'cuba')

cuba {
    artifact {
        group = 'com.company.adclient'
        version = '0.1'
        isSnapshot = true
    }
    tomcat {
        dir = "$project.rootDir/build/tomcat"
    }
    ide {
         
        vcs = 'Git'
    }
}

def postgres = 'org.postgresql:postgresql:9.4-1201-jdbc41'

configure([globalModule, coreModule, guiModule, webModule, portalModule]) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'idea')
    apply(plugin: 'cuba')

    dependencies {
        testCompile('junit:junit:4.12')
        compile 'org.springframework.ldap:spring-ldap-core:2.0.2.RELEASE'
        compile 'com.haulmont.yarg:yarg:1.0.70'
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }
}

configure(globalModule) {
    task enhance(type: CubaEnhancing)
    
    
}

configure(coreModule) {

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        provided(servletApi)
        jdbc(postgres)
        testRuntime(postgres)

    }

    task cleanConf(description: 'Cleans up conf directory') << {
        def dir = new File(cuba.tomcat.dir, '/conf/adclient-core')
        if (dir.isDirectory()) {
            ant.delete(includeemptydirs: true) {
                fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = 'adclient-core'
        appJars('adclient-global', 'adclient-core')
    }

    task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
        dbms = 'postgres'
        host = 'localhost'
        dbName = 'adclient'
        dbUser = 'cuba'
        dbPassword = 'cuba'
    }

    task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
        dbms = 'postgres'
        host = 'localhost'
        dbName = 'adclient'
        dbUser = 'cuba'
        dbPassword = 'cuba'
    }
}

configure(guiModule) {
    dependencies {
        compile(globalModule)

    }

    task deployConf(type: Copy) {
        from file('src')
        include "com/company/adclient/**"
        into "$cuba.tomcat.dir/conf/adclient"
    }
}

configure(webModule) {
    configurations {
        webcontent
    }

    dependencies {
        provided(servletApi)
        compile(guiModule)

    }
    
    task webArchive(type: Zip) {
        from file("$buildDir/web")
        from file('web')
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deployConf(type: Copy) {
        from file('src')
        include "com/company/adclient/**"
        into "$cuba.tomcat.dir/conf/adclient"
    }

    task clearMessagesCache(type: CubaClearMessagesCache) {
        appName = 'adclient'
    }
    deployConf.dependsOn clearMessagesCache

    task cleanConf(description: 'Cleans up conf directory') << {
        def dir = new File(cuba.tomcat.dir, '/conf/adclient')
        if (dir.isDirectory()) {
            ant.delete(includeemptydirs: true) {
                fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = 'adclient'
        appJars('adclient-global', 'adclient-gui', 'adclient-web')
    }
}



configure(portalModule) {
    dependencies {
        provided(servletApi)
        compile(globalModule)
        
    }

    def webappName = 'adclient-portal'
    def resourcesDir = "$cuba.tomcat.dir/webapps/$webappName/resources"
    def ftlDir = "$cuba.tomcat.dir/webapps/$webappName/WEB-INF/templates"

    task deploy(dependsOn: assemble, type: CubaDeployment) {
        appName = webappName
        appJars('adclient-global', 'adclient-portal')
    }

    task deployStatic() << {
        copy {
            from file('web/resources')
            include '**/*.css'
            include '**/*.js'
            include '**/*.png'
            include '**/*.gif'
            include '**/*.jpg'
            into resourcesDir
        }
        copy {
            from file('web/WEB-INF/templates')
            include '**/*.ftl'
            into ftlDir
        }
    }

    task cleanStatic() << {
        delete resourcesDir
        delete ftlDir
    }

    task webArchive(type: Zip) {
        from file('web')
        from file("$buildDir/web")
        exclude '**/web.xml', '**/app.properties'
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }
}


task undeploy(type: Delete, dependsOn: ':adclient-web:cleanConf') {
    delete("$cuba.tomcat.dir/shared")
    delete("$cuba.tomcat.dir/webapps/adclient-core")
    delete("$cuba.tomcat.dir/webapps/adclient")
    delete("$cuba.tomcat.dir/webapps/adclient-portal")
}

task restart(dependsOn: ['stop', ':adclient-core:deploy', ':adclient-web:deploy', ':adclient-portal:deploy'], description: 'Redeploys applications and restarts local Tomcat') << {
    ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
        not {
            socket(server: 'localhost', port: '8787')
        }
    }
    start.execute()
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

apply from: 'extra.gradle'
